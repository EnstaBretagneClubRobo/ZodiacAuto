/*------------------------------------------------------------------------------
* ROS node "depth_publisher" connects to the Tritech Micron Echocounder and
* publishes the depth of the seabed on the topic "depth".
* ------------------------------------------------------------------------------
*/

#include <ros/ros.h>
#include <string.h>
#include <iostream>
#include "std_msgs/Float64.h"

using namespace std;

int fd;

ros::Publisher depth_pub;

std_msgs::Float64 depth_msg;


int main(int argc, char **argv)
{
    ros::init(argc, argv, "depth_publisher");
    ros::NodeHandle nh;
    ros::NodeHandle nhp("~");

    depth_pub = nh.advertise<std_msgs::Float64>("depth", 1000);

    string port;
    nhp.param<string>("port", port, "/dev/ttyUSB0");

    ros::Rate loop_rate(1);
    depth_pub.publish(depth_msg);
    ros::spinOnce();
    loop_rate.sleep();
    
    return 0;
}


#include <ros/ros.h>
#include <serial/serial.h>
#include <std_msgs/String.h>
#include <std_msgs/Empty.h>

serial::Serial ser;

void write_callback(const std_msgs::String::ConstPtr& msg){
    ROS_INFO_STREAM("Writing to serial port" << msg->data);
    ser.write(msg->data);
}

int main (int argc, char** argv){
    ros::init(argc, argv, "serial_example_node");
    ros::NodeHandle nh;

    ros::Subscriber write_sub = nh.subscribe("write", 1000, write_callback);
    ros::Publisher read_pub = nh.advertise<std_msgs::String>("read", 1000);

    try
    {
        ser.setPort("/dev/ttyACM0");
        ser.setBaudrate(9600);
        serial::Timeout to = serial::Timeout::simpleTimeout(1000);
        ser.setTimeout(to);
        ser.open();
    }
    catch (serial::IOException& e)
    {
        ROS_ERROR_STREAM("Unable to open port ");
        return -1;
    }

    if(ser.isOpen()){
        ROS_INFO_STREAM("Serial Port initialized");
    }else{
        return -1;
    }

    ros::Rate loop_rate(5);
    while(ros::ok()){

        ros::spinOnce();

        if(ser.available()){
            ROS_INFO_STREAM("Reading from serial port");
            std_msgs::String result;
            result.data = ser.read(ser.available());
            ROS_INFO_STREAM("Read: " << result.data);
            read_pub.publish(result);
        }
        loop_rate.sleep();

    }
}
